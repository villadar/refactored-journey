/*
 * Copyright 2017 Paolo Villadarez
 *
 * This code cannot be used, copied, or redistributed without express consent from the
 * author. Please contact villadarez@gmail.com for permission to use this code.
 */
package ca.humanheartnature.mag_qbo;

import ca.humanheartnature.core.comm.MySqlConnectionFactory;
import ca.humanheartnature.core.util.ArgParser;
import ca.humanheartnature.mag_qbo.comm.MagentoQboDataBridge;
import ca.humanheartnature.mag_qbo.enums.MagQboPropertyKeys;
import ca.humanheartnature.quickbooks.comm.QboDataConnectionFactory;
import com.intuit.ipp.exception.FMSException;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import java.util.stream.Collectors;

/**
 * Parses command line arguments to initialize and execute the Magento_QBO_Integration
 * program. The <code>main</code> method for the program is defined here.
 * <p>
 * <b>Usage Message</b>
 * <pre>
 * Program:     Magento_QBO_Integration 1.2
 * Description: Performs data transfer operations between a Magento MySQL database and
 *              QuickBooks Online (QBO)
 *
 * Positional arguments:
 *    arg1:             Operation to execute:
 *                      mag_to_qbo - Transfer data from a Magento database to QBO
 *                      mag_to_file - Serialize data from a Magento database to a file
 *                      file_to_qbo - Deserialize a file that was generated by this
 *                                    program into QBO
 *
 * Named arguments:
 *    --user, -u        Magento database user
 *    --password, -p    Password for the Magento database user
 *    --bean, -b        Location of the file to extract from or load to when performing
 *                      mag_to_file or file_to_qbo operations
 *    --config, -c      Location of this program's configuration file; mandatory argument
 *    --taxcodes, -t    Location of this program's tax code mapping file
 *    --logging, -l     Location of the logger configuration file
 * </pre>
 */
public final class Magento_QBO_Integration_Launcher
{
   /** Class logger */
   private static final Logger LOGGER =
         Logger.getLogger(Magento_QBO_Integration_Launcher.class.getName());
   
   
   /** Application version number */
   private static final String PROGRAM_VERSION = "1.2";
   
   /** Position of operation identifier argument */
   private static final int OPERATION_ARG_POSITION = 0;
   
   /** One of the supported values for positional argument 1;
    *  the program transfers data from Magento to QBO if used */
   private static final String MAG_TO_QBO_OP = "mag_to_qbo";
   
   /** One of the supported values for positional argument 1;
    *  the program transfers data from Magento to a file if used */
   private static final String MAG_TO_FILE_OP = "mag_to_file";
   
   /** One of the supported values for positional argument 1;
    *  the program transfers data from a file to QBO if used */
   private static final String FILE_TO_QBO_OP = "file_to_qbo";
   
   /** Command line argument identifier for Magento database user */
   private static final String MAG_USER_ARG = "--user";
   
   /** Command line argument identifier for Magento database password for user */
   private static final String MAG_PASSWORD_ARG = "--password";
   
   /** Command line argument identifier for configuration file location */
   private static final String CONFIG_FILE_ARG = "--config";
   
   /** Command line argument identifier for tax code map file location */
   private static final String TAX_CODE_MAP_ARG = "--taxcodes";
   
   /** Command line argument identifier for bean file location */
   private static final String BEAN_FILE_ARG = "--bean";
   
   /** Command line argument identifier for logging preference file location */
   private static final String LOGGING_FILE_ARG = "--logging";
   
   
   /**
    * Initializes and parses command line arguments
    * 
    * @param args the command line arguments
    */
   public static void main(String[] args)
   {
      ArgParser argParser = new ArgParser();
      argParser.setUsageMessageHeader(
            "Magento_QBO_Integration",
            PROGRAM_VERSION,
            "Performs data transfer operations between a Magento MySQL database and " +
            "QuickBooks Online (QBO)");
      
      argParser.addPositionalArgument(
            "Operation to execute:\n" +
            MAG_TO_QBO_OP + " - Transfer data from a Magento database to QBO\n" +
            MAG_TO_FILE_OP + " - Serialize data from a Magento database to a file\n" +
            FILE_TO_QBO_OP +
            " - Deserialize a file that was generated by this program into QBO");
      
      argParser.addNamedArgument(
            MAG_USER_ARG, "-u", "Magento database user", true);
      argParser.addNamedArgument(
            MAG_PASSWORD_ARG, "-p",
            "Password for the Magento database user",
            true);
      argParser.addNamedArgument(
            BEAN_FILE_ARG, "-b",
            "Location of the file to extract from or load to when performing " +
            "mag_to_file or file_to_qbo operations", true);
      argParser.addNamedArgument(
            CONFIG_FILE_ARG, "-c",
            "Location of this program's configuration file; mandatory argument", true);
      argParser.addNamedArgument(
            TAX_CODE_MAP_ARG, "-t",
            "Location of this program's tax code mapping file", true);
      argParser.addNamedArgument(
            LOGGING_FILE_ARG, "-l", "Location of the logging configuration file", true);
      
      argParser.parseArgs(args);
      
      Properties config = new Properties();
      if (argParser.isNamedArgumentUsed(CONFIG_FILE_ARG))
      {
         String fileLocation = argParser.getNamedArgValue(CONFIG_FILE_ARG);
         try (InputStream inputStream = new FileInputStream(fileLocation))
         {
            config.load(inputStream);
         }
         catch(IOException ex)
         {
            System.out.println(
                  "Cannot access configuration properties file: " + fileLocation);
            System.exit(-1);
         }
      }
      else
      {
         System.out.println("Configuration file location must be specified\n");
         argParser.printUsageMessage();
         System.exit(-1);
      }
      
      if (argParser.isNamedArgumentUsed(LOGGING_FILE_ARG))
      {
         String fileLocation = argParser.getNamedArgValue(LOGGING_FILE_ARG);
         try (InputStream inputStream = new FileInputStream(fileLocation))
         {
            LogManager.getLogManager().readConfiguration(inputStream);
         }
         catch(IOException ex)
         {
            System.out.println("Cannot access logging properties file: " + fileLocation);
            ex.printStackTrace(System.out);
            System.exit(-1);
         }
      }      
      
      Magento_QBO_Integration_Launcher launcher = new Magento_QBO_Integration_Launcher();
      launcher.launch(argParser, config);
   }
   
   /**
    * Initializes and executes operations on {@link MagentoQboDataBridge} based on command
    * line arguments and configuration file values
    * 
    * @param argParser Command line argument parser for this program
    * @param config Configuration properties for this program
    */
   private void launch(ArgParser argParser, Properties config)
   {
      try
      {
         MagentoQboDataBridge dataBridge = new MagentoQboDataBridge();
         MySqlConnectionFactory magConnFactory;
         QboDataConnectionFactory qboService;
         Map<String, String> taxCodeMap = null;

         switch(argParser.getPositionalArgValue(OPERATION_ARG_POSITION))
         {
            case MAG_TO_QBO_OP:
               if (!argParser.isNamedArgumentUsed(MAG_USER_ARG))
               {
                  System.out.println("Database user must be specified\n");
                  argParser.printUsageMessage();
                  System.exit(-1);
               }
               if (!argParser.isNamedArgumentUsed(MAG_PASSWORD_ARG))
               {
                  System.out.println("Database password must be specified\n");
                  argParser.printUsageMessage();
                  System.exit(-1);
               }
               
               if (argParser.isNamedArgumentUsed(TAX_CODE_MAP_ARG))
               {
                  String fileLocation = argParser.getNamedArgValue(TAX_CODE_MAP_ARG);
                  try (InputStream inputStream = new FileInputStream(fileLocation))
                  {
                     Properties taxCodeProperties = new Properties();
                     taxCodeProperties.load(inputStream);
                     taxCodeMap = taxCodeProperties.entrySet().stream()
                        .collect(Collectors.toMap(e -> e.getKey().toString(),
                                                  e -> e.getValue().toString()));
                  }
                  catch(IOException ex)
                  {
                     System.out.println(
                           "Cannot access tax code map file: " + fileLocation);
                     System.exit(-1);
                  }
               }
               else
               {
                  System.out.println("Tax code map file name must be specified\n");
                  argParser.printUsageMessage();
                  System.exit(-1);
               }
      
               magConnFactory = new MySqlConnectionFactory(
                     config.getProperty(MagQboPropertyKeys.MAGENTO_HOST),
                     config.getProperty(MagQboPropertyKeys.MAGENTO_DATABASE),
                     argParser.getNamedArgValue(MAG_USER_ARG),
                     argParser.getNamedArgValue(MAG_PASSWORD_ARG));
               qboService = new QboDataConnectionFactory(
                     config.getProperty(MagQboPropertyKeys.QBO_BASE_URL),
                     config.getProperty(MagQboPropertyKeys.QBO_APP_TOKEN),
                     config.getProperty(MagQboPropertyKeys.QBO_REALM_ID),
                     config.getProperty(MagQboPropertyKeys.QBO_CONSUMER_KEY),
                     config.getProperty(MagQboPropertyKeys.QBO_CONSUMER_SECRET),
                     config.getProperty(MagQboPropertyKeys.QBO_ACCESS_TOKEN),
                     config.getProperty(MagQboPropertyKeys.QBO_ACCESS_SECRET));
               dataBridge.etlFromMagentoToQbo(magConnFactory,
                                              qboService,
                                              config,
                                              taxCodeMap);
               break;

            case MAG_TO_FILE_OP:
               if (!argParser.isNamedArgumentUsed(MAG_USER_ARG))
               {
                  System.out.println("Database user must be specified\n");
                  argParser.printUsageMessage();
                  System.exit(-1);
               }
               if (!argParser.isNamedArgumentUsed(MAG_PASSWORD_ARG))
               {
                  System.out.println("Database password must be specified\n");
                  argParser.printUsageMessage();
                  System.exit(-1);
               }
               if (!argParser.isNamedArgumentUsed(BEAN_FILE_ARG))
               {
                  System.out.println("Bean file name must be specified\n");
                  argParser.printUsageMessage();
                  System.exit(-1);
               }
               
               magConnFactory = new MySqlConnectionFactory(
                     config.getProperty(MagQboPropertyKeys.MAGENTO_HOST),
                     config.getProperty(MagQboPropertyKeys.MAGENTO_DATABASE),
                     argParser.getNamedArgValue(MAG_USER_ARG),
                     argParser.getNamedArgValue(MAG_PASSWORD_ARG));
               dataBridge.extractFromMagentoToBeanFile(
                     magConnFactory,
                     argParser.getNamedArgValue(BEAN_FILE_ARG),
                     config);
               break;

            case FILE_TO_QBO_OP:
               if (!argParser.isNamedArgumentUsed(BEAN_FILE_ARG))
               {
                  System.out.println("Bean file name must be specified\n");
                  argParser.printUsageMessage();
                  System.exit(-1);
               }
               
               if (argParser.isNamedArgumentUsed(TAX_CODE_MAP_ARG))
               {
                  String fileLocation = argParser.getNamedArgValue(TAX_CODE_MAP_ARG);
                  try (InputStream inputStream = new FileInputStream(fileLocation))
                  {
                     Properties taxCodeProperties = new Properties();
                     taxCodeProperties.load(inputStream);
                     taxCodeMap = taxCodeProperties.entrySet().stream()
                        .collect(Collectors.toMap(e -> e.getKey().toString(),
                                                  e -> e.getValue().toString()));
                  }
                  catch(IOException ex)
                  {
                     System.out.println(
                           "Cannot access tax code map file: " + fileLocation);
                     System.exit(-1);
                  }
               }
               else
               {
                  System.out.println("Tax code map file name must be specified\n");
                  argParser.printUsageMessage();
                  System.exit(-1);
               }
               
               qboService = new QboDataConnectionFactory(
                     config.getProperty(MagQboPropertyKeys.QBO_BASE_URL),
                     config.getProperty(MagQboPropertyKeys.QBO_APP_TOKEN),
                     config.getProperty(MagQboPropertyKeys.QBO_REALM_ID),
                     config.getProperty(MagQboPropertyKeys.QBO_CONSUMER_KEY),
                     config.getProperty(MagQboPropertyKeys.QBO_CONSUMER_SECRET),
                     config.getProperty(MagQboPropertyKeys.QBO_ACCESS_TOKEN),
                     config.getProperty(MagQboPropertyKeys.QBO_ACCESS_SECRET));
               dataBridge.loadFromBeanFileToQbo(argParser.getNamedArgValue(BEAN_FILE_ARG),
                                                qboService,
                                                config,
                                                taxCodeMap);
               break;
               
            default:
               // Cases where switch argument is null is handled by ArgParser.parse()
               System.out.println(argParser.getPositionalArgValue(OPERATION_ARG_POSITION)+
                                  " is not a valid operation\n");
               argParser.printUsageMessage();
               System.exit(-1);
         }
      }
      catch (FMSException ex)
      {
         LOGGER.log(Level.SEVERE,
                    "Unable to connect to QuickBooks Online. Verify that the " +
                    "QuickBooks Online configuration properties are correct",
                    ex);
         System.exit(-1);
      }
   }
   
}
